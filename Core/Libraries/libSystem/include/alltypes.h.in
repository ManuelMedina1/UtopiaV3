/*
 * SPDX-License-Identifier: BSD-2-Clause
 *
 * Copyright (c) 2022 Diego Magdaleno
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $Utopia$
 */

/*
 * The following file defines a series of common POSIX types
 * UNIX and System convention types, they are still part of
 * our libc despite our libc not being POSIX compatible
 * for convenience reasons, this decision might be reevaluated
 * at some point in the future
*/



/* ENDIANESS */
#define __LITTLE_ENDIAN 1234
#define __BIG_ENDIAN 4321
#define __USE_TIME_BITS64 1


/* Common POSIX-like/UNIX-like type definitions */

TYPEDEF unsigned _Addr      size_t;
TYPEDEF unsigned _Addr      uintptr_t;
TYPEDEF _Addr               ptrdiff_t;
TYPEDEF _Addr               ssize_t;
TYPEDEF _Addr               intptr_t;
TYPEDEF _Addr               regoff_t;
TYPEDEF _Reg                register_t;
TYPEDEF _Int64              time_t;
TYPEDEF _Int64              subseconds_t;

/* Common POSIX-like/UNIX-like number sizes */

/* SIGNED */
TYPEDEF signed char     int8_t;
TYPEDEF signed short    int16_t;
TYPEDEF signed int      int32_t;
TYPEDEF signed _Int64   int64_t;
TYPEDEF signed _Int64   intmax_t;

/* UNSIGNED */
TYPEDEF unsigned char       uint8_t;
TYPEDEF unsigned short      uint16_t;
TYPEDEF unsigned int        uint32_t;
TYPEDEF unsigned _Int64     uint64_t;
TYPEDEF unsigned _Int64     u_int64_t;
TYPEDEF unsigned _Int64     uintmax_t;

/*  Additional POSIX-like/UNIX-like definitons and types */
TYPEDEF unsigned            mode_t;
TYPEDEF unsigned _Reg       nlik_t;
TYPEDEF _Int64              off_t;
TYPEDEF unsigned _Int64     ino_t;
TYPEDEF unsigned _Int64     dev_t;
TYPEDEF long                blksize_t;
TYPEDEF _Int64              blkcnt_t;
TYPEDEF unsigned _Int64     fsblkcnt_t;
TYPEDEF unsigned _Int64     fsfilcnt_t;

TYPEDEF unsigned            wint_t;
TYPEDEF unsigned long       wctype_t;


/* TIME RELATED DATATYPES */
TYPEDEF void*       timer_t;
TYPEDEF int         clockid_t;
TYPEDEF long        clock_t;

/* TIME RELATED STRUCTS */
STRUCT timeval      { time_t tv_sec; suseconds_t tv_usec; };
STRUCT timespec     { time_t tv_sec; int :8*(sizeof(time_t)-sizeof(long))*(__BYTE_ORDER==4321); long tv_nsec; int :8*(sizeof(time_t)-sizeof(long))*(__BYTE_ORDER!=4321); };

/* PID */
TYPEDEF int         pid_t;
TYPEDEF unsigned    id_t;
TYPEDEF unsigned    uid_t;
TYPEDEF unsigned    gid_t;
TYPEDEF int         key_t;
TYPEDEF unsigned    useconds_t;

/* THREADS */
#ifdef __cplusplus
TYPEDEF unsigned long pthread_t;
#else
TYPEDEF struct __pthread * pthread_t;
#endif /* ifdef __cplusplus */
TYPEDEF int                             pthread_once_t;
TYPEDEF unsigned                        pthread_key_t;
TYPEDEF int                             pthread_spinlock_t;
TYPEDEF struct { unsigned __attr; }     pthread_mutexattr_t;
TYPEDEF struct { unsigned __attr; }     pthread_condattr_t;
TYPEDEF struct { unsigned __attr; }     pthread_barrierattr_t;
TYPEDEF struct { unsigned __attr[2]; }  pthread_rwlockattr_t;

/* FILE */
STRUCT _IO_FILE { char __x; };
TYPEDEF struct _IO_FILE FILE;

/* va_list */
TYPEDEF __builtin_va_list   va_list;
TYPEDEF __builtin_va_list   __isoc_va_list;

/* mbstate */
TYPEDEF struct __mbstate_t { unsigned __opaque1, __opaque2; } mbstate_t;

/* locale struct */
TYPEDEF struct __locale_struct * locate_t;

/* sigset */
TYPEDEF struct __sigset_t { unsigned long __bits[128/sizeof(long)]; } sigset_t;

/* iovec */
STRUCT iovec {  void *iov_base; size_t iov_len; };

/* winsize */
STRUCT winsize { unsigned short ws_row, ws_col, ws_xpixel, ws_ypixel; };

/* Socks */
TYPEDEF unsigned        socklen_t;
TYPEDEF unsigned short  sa_family_t;

/* Additional pthreads unions and structs */
TYPEDEF struct { union { int __i[sizeof(long)==8?14:9]; volatile int __vi[sizeof(long)==8?14:9]; unsigned long __s[sizeof(long)==8?7:9]; } __u; } pthread_attr_t;
TYPEDEF struct { union { int __i[sizeof(long)==8?10:6]; volatile int __vi[sizeof(long)==8?10:6]; volatile void *volatile __p[sizeof(long)==8?5:6]; } __u; } pthread_mutex_t;
TYPEDEF struct { union { int __i[sizeof(long)==8?10:6]; volatile int __vi[sizeof(long)==8?10:6]; volatile void *volatile __p[sizeof(long)==8?5:6]; } __u; } mtx_t;
TYPEDEF struct { union { int __i[12]; volatile int __vi[12]; void *__p[12*sizeof(int)/sizeof(void*)]; } __u; } pthread_cond_t;
TYPEDEF struct { union { int __i[12]; volatile int __vi[12]; void *__p[12*sizeof(int)/sizeof(void*)]; } __u; } cnd_t;
TYPEDEF struct { union { int __i[sizeof(long)==8?14:8]; volatile int __vi[sizeof(long)==8?14:8]; void *__p[sizeof(long)==8?7:8]; } __u; } pthread_rwlock_t;
TYPEDEF struct { union { int __i[sizeof(long)==8?8:5]; volatile int __vi[sizeof(long)==8?8:5]; void *__p[sizeof(long)==8?4:5]; } __u; } pthread_barrier_t;

/* Undef the files we used for configuration */
#undef _Addr
#undef _Int64
#undef _Reg
